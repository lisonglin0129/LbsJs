(function() {
    String.prototype.toJson = function() {
        return lbs.string.toJson(this.toString());
    }
    return lbs = {
        assign: function(id, datas, tps, hex) {
            var tps = (tps == undefined) || (tps == '') ? false : tps;
            var hexs = (hex == undefined) || (hex == '') ? false : hex;
            var templateContext = "";
            var js_lable = [];
            var css_lable = [];
            var meta_lable = [];
            var depin_check_language_values = new Object();
            var replaceTemplateVar = "@lisonglin@";
            var tag_keyword_values = ['for', 'while', 'if', 'switch', 'break', 'break', "}", "else", "do", "var"];
            let result_object = new Object();
            result_object.is_hex = hexs;
            this.is_tag_keyword_values = function(tag_values) {
                for (var i = 0; i < tag_keyword_values.length; i++) {
                    if (tag_values.indexOf(tag_keyword_values[i]) >= 0) {
                        return true
                    }
                }
                return false
            }
            ;
            this.completeTemplate_depin = function(compateContext) {
                var completeTemplate_depin_values = new Object();
                completeTemplate_depin_values.compateContext_code = compateContext.protype.temlate_tag_context;
                completeTemplate_depin_values.html = "";
                completeTemplate_depin_values.lisonglin = 0;
                for (var i = 0; i < compateContext.complate_values.length; i++) {
                    completeTemplate_depin_values.prototype_tags = "<s:" + compateContext.complate_values[i] + ">";
                    completeTemplate_depin_values.tag_indexOf = completeTemplate_depin_values.compateContext_code.indexOf(completeTemplate_depin_values.prototype_tags);
                    if (this.is_tag_keyword_values(compateContext.complate_values[i]) == false) {
                        if (0 == completeTemplate_depin_values.tag_indexOf) {
                            completeTemplate_depin_values.html = "html=html+" + completeTemplate_depin_values.html + compateContext.complate_values[i] + "+"
                        } else {
                            completeTemplate_depin_values.replace_tags = completeTemplate_depin_values.compateContext_code.substr(0, completeTemplate_depin_values.tag_indexOf).replace(/(\"|\')/g, function(d1) {
                                return "\\" + d1
                            });
                            completeTemplate_depin_values.html = "html=html+" + completeTemplate_depin_values.html + "\"" + completeTemplate_depin_values.replace_tags + "\"+" + compateContext.complate_values[i] + "+"
                        }
                        completeTemplate_depin_values.compateContext_code = completeTemplate_depin_values.compateContext_code.substr((completeTemplate_depin_values.tag_indexOf + completeTemplate_depin_values.prototype_tags.length), completeTemplate_depin_values.compateContext_code.length)
                    } else {
                        if (0 == completeTemplate_depin_values.tag_indexOf) {
                            completeTemplate_depin_values.html = completeTemplate_depin_values.html + "\'\';" + compateContext.complate_values[i] + "html=html+"
                        } else {
                            completeTemplate_depin_values.replace_tags = completeTemplate_depin_values.compateContext_code.substr(0, completeTemplate_depin_values.tag_indexOf).replace(/(\"|\')/g, function(d1) {
                                return "\\" + d1
                            });
                            completeTemplate_depin_values.html = completeTemplate_depin_values.html + "\'" + completeTemplate_depin_values.replace_tags + "\';";
                            completeTemplate_depin_values.html = completeTemplate_depin_values.html + compateContext.complate_values[i];
                            completeTemplate_depin_values.html = "html=html+" + completeTemplate_depin_values.html + "html=html+"
                        }
                        completeTemplate_depin_values.compateContext_code = completeTemplate_depin_values.compateContext_code.substr((completeTemplate_depin_values.tag_indexOf + completeTemplate_depin_values.prototype_tags.length), completeTemplate_depin_values.compateContext_code.length)
                    }
                    if (i == compateContext.complate_values.length - 1) {
                        completeTemplate_depin_values.html = completeTemplate_depin_values.html + "\'" + completeTemplate_depin_values.compateContext_code + "\'; "
                    }
                }
                completeTemplate_depin_values.html = completeTemplate_depin_values.html.substr(0, (completeTemplate_depin_values.html.length - 1));
                return completeTemplate_depin_values
            }
            ;
            this.completeTemplate = function(Context) {
                var completeTemplate_values = new Object();
                completeTemplate_values.tags = "";
                completeTemplate_values.ds = "";
                completeTemplate_values.tmp_tags = Context.temlate_tag_context;
                completeTemplate_values.ks = new Array();
                completeTemplate_values.flag = false;
                completeTemplate_values.kas = "";
                completeTemplate_values.bs = "";
                completeTemplate_values.tmp_tags_replace = "";
                completeTemplate_values.zs = Context.temlate_tag_context.replace(/<s:(.+?)>/g, function(d1, d2, d3) {
                    if (d2.indexOf("if") >= 0) {
                        var temps = Context.temlate_tag_context.replace(/{\s*>/g, "{");
                        temps = temps.replace(/<s:/g, "");
                        completeTemplate_values.ks.push(temps);
                        return temps
                    } else {
                        completeTemplate_values.ks.push(d2);
                        return d2
                    }
                });
                if (completeTemplate_values.ks.length == 0) {
                    completeTemplate_values.tmp_tags_replace = completeTemplate_values.tmp_tags_replace = Context.temlate_tag_context.replace(/(\"|\')/g, function(d1) {
                        return "\\" + d1
                    });
                    return "html = html+\'" + Context.temlate_tag_context + "\';"
                }
                if (completeTemplate_values.tmp_tags == "") {
                    return ""
                }
                for (var i = 0; i < completeTemplate_values.ks.length; i++) {
                    if (this.is_tag_keyword_values(completeTemplate_values.ks[i]) == true) {
                        completeTemplate_values.flag = true
                    }
                }
                if (completeTemplate_values.flag) {
                    completeTemplate_values.ds = this.completeTemplate_depin({
                        protype: Context,
                        complate_values: completeTemplate_values.ks
                    }).html
                } else {
                    completeTemplate_values.bs = "html=html+" + this.completeTemplate_depin({
                        protype: Context,
                        complate_values: completeTemplate_values.ks
                    }).html
                }
                return (completeTemplate_values.ds + completeTemplate_values.bs)
            }
            ;
            this.depin_check_language = function(context, dpin) {
                if (dpin == null) {
                    dpin = [];
                    dpin.push("let html=\'\';")
                }
                depin_check_language_values.codeLength = context.length;
                depin_check_language_values.runCodeLength = context.indexOf("\n");
                depin_check_language_values.runCode = context.substr(0, depin_check_language_values.runCodeLength);
                depin_check_language_values.nex = context.substr(depin_check_language_values.runCodeLength + 1, depin_check_language_values.codeLength);
                depin_check_language_values.TagObject = new Object();
                if (depin_check_language_values.runCodeLength > 1) {
                    depin_check_language_values.TagObject.tag = depin_check_language_values.runCode.trim().replace(/<s:(.+?)>/g, function(d1, d2, d3) {
                        tm = d2;
                        return tm
                    });
                    if (depin_check_language_values.TagObject.tag.indexOf("@<script") >= 0) {
                        depin_check_language_values.TagObject.tag.replace(/@<script(\s*|(.+?))src\s*=\s*"(.+?)"(\s*|(.+?))>/g, function(d1, d2, d3, d4) {
                            js_lable.push({
                                "name": "script",
                                "src": d4
                            })
                        });
                        depin_check_language_values.TagObject.tag = "";
                        depin_check_language_values.runCode = ""
                    }
                    if (depin_check_language_values.TagObject.tag.indexOf("@<link") >= 0) {
                        depin_check_language_values.TagObject.tag.replace(/@<link(\s*|(.+?))href\s*=\s*"(.+?)"(\s*|(.+?))>/g, function(d1, d2, d3, d4) {
                            css_lable.push({
                                "name": "link",
                                "href": d4
                            })
                        });
                        depin_check_language_values.runCode = "";
                        depin_check_language_values.TagObject.tag = ""
                    }
                    if (depin_check_language_values.TagObject.tag.indexOf("@<meta") >= 0) {
                        depin_check_language_values.TagObject.tag.replace(/@<meta\s*name\s*=\s*"(.+?)"\s*content="(.+?)">/g, function(d1, d2, d3, d4) {
                            meta_lable.push({
                                name: d2,
                                "content": d3
                            })
                        });
                        depin_check_language_values.TagObject.tag = "";
                        depin_check_language_values.runCode = ""
                    }
                    if (depin_check_language_values.TagObject.tag.indexOf("if") >= 0) {
                        depin_check_language_values.TagObject.tag = depin_check_language_values.runCode.trim().replace(/{\s*>/g, "{");
                        depin_check_language_values.TagObject.tag = depin_check_language_values.TagObject.tag.replace(/<s:/g, "")
                    }
                    depin_check_language_values.TagObject.tag = depin_check_language_values.TagObject.tag.trim();
                    if (0 <= depin_check_language_values.runCode.trim().search("<s:(.+?)>")) {
                        depin_check_language_values.TagObject.fag = true
                    } else {
                        depin_check_language_values.TagObject.fag = false
                    }
                    depin_check_language_values.TagObject.temlate_tag_context = depin_check_language_values.runCode.trim();
                    dpin.push(this.completeTemplate(depin_check_language_values.TagObject))
                } else {
                    if (depin_check_language_values.nex.trim().indexOf("@<script") >= 0) {
                        depin_check_language_values.nex.trim().replace(/@<script(\s*|(.+?))src\s*=\s*"(.+?)"(\s*|(.+?))>/g, function(d1, d2, d3, d4) {
                            js_lable.push({
                                "name": "script",
                                "src": d4
                            })
                        });
                        depin_check_language_values.nex = ""
                    }
                    if (depin_check_language_values.nex.trim().indexOf("@<link") >= 0) {
                        depin_check_language_values.nex.trim().replace(/@<link(\s*|(.+?))href\s*=\s*"(.+?)"(\s*|(.+?))>/g, function(d1, d2, d3, d4) {
                            css_lable.push({
                                "name": "link",
                                "href": d4
                            })
                        });
                        depin_check_language_values.nex = ""
                    }
                    if (depin_check_language_values.nex.trim().indexOf("@<meta") >= 0) {
                        depin_check_language_values.nex.trim().replace(/@<meta\s*name\s*=\s*"(.+?)"\s*content="(.+?)">/g, function(d1, d2, d3, d4) {
                            meta_lable.push({
                                name: d2,
                                "content": d3
                            })
                        });
                        depin_check_language_values.nex = ""
                    }
                    ;depin_check_language_values.TagObject.tag = depin_check_language_values.nex.trim().replace(/<s:(.+?)>/g, function(d1, d2, d3) {
                        tm = d2;
                        return d2
                    });
                    if (depin_check_language_values.TagObject.tag.indexOf("if") >= 0) {
                        depin_check_language_values.TagObject.tag = depin_check_language_values.runCode.trim().replace(/{\s*>/g, "{");
                        depin_check_language_values.TagObject.tag = depin_check_language_values.TagObject.tag.replace(/<s:/g, "")
                    }
                    depin_check_language_values.TagObject.tag = depin_check_language_values.TagObject.tag.trim();
                    if (0 <= depin_check_language_values.runCode.trim().search("<s:(.+?)>")) {
                        depin_check_language_values.TagObject.fag = true
                    } else {
                        depin_check_language_values.TagObject.fag = false
                    }
                    depin_check_language_values.TagObject.temlate_tag_context = depin_check_language_values.nex.trim();
                    dpin.push(this.completeTemplate(depin_check_language_values.TagObject));
                    return dpin
                }
                return this.depin_check_language(depin_check_language_values.nex, dpin)
            }
            ;
            result_object.ids = id;
            result_object.datas = datas;
            result_object.replaceTemplateVar = tag_keyword_values;
            this.formatTemplate = function(script) {
                return script
            }
            ;
            this.RuncodeTemplate = function(TemplacteCodeArray, datas) {
                let Codes = "";
                let script = "";
                let function_name = "li_" + Date.parse(new Date()) + "_songlin";
                result_object.function_name = function_name;
                for (var i = 0; i < TemplacteCodeArray.length; i++) {
                    script = script + this.formatTemplate(TemplacteCodeArray[i])
                }
                script = script.replace(/;"";/g, function(d1) {
                    return ";"
                });
                script = script.replace(/=html\+html/g, function(d1) {
                    return ""
                });
                script = script.replace(/html=html\+"";/g, function(d1) {
                    return ""
                });
                result_object.script = script;
                Codes = "(function(){return " + function_name + "={complate:function(){ " + script + " return html; }} })();" + function_name + ".complate()";
                result_object.context = eval(Codes);
                if(result_object.is_hex == false){
                	let decode = lbs.get.Id(result_object.ids).innerHTML;
                	
                	lbs.get.Id(result_object.ids).innerHTML = lbs.string.toHex(lbs.string.base64encode(decode));
                }
                return result_object;
            }
            ;
            this.loader_template = function(id, fun) {
                var template_ids = id + ".lin";
                try {
                    XMLHttpReq = new ActiveXObject('Msxml2.XMLHTTP')
                } catch (E) {
                    try {
                        XMLHttpReq = new ActiveXObject('Microsoft.XMLHTTP')
                    } catch (E) {
                        XMLHttpReq = new XMLHttpRequest()
                    }
                }
                if (XMLHttpReq) {
                    XMLHttpReq.open('get', template_ids, true);
                    XMLHttpReq.send(null)
                }
                XMLHttpReq.onreadystatechange = function() {
                    switch (XMLHttpReq.readyState) {
                    case 1:
                        {
                            break
                        }
                    case 2:
                        {
                            break
                        }
                    case 3:
                        {
                            break
                        }
                    case 4:
                        {
                            if (XMLHttpReq.status == 200 || XMLHttpReq.status == 0) {
                                fun(XMLHttpReq.responseText)
                            }
                        }
                    }
                }
            }
            ;
            if (tps == false) {
                templateContext = lbs.get.Id(id).innerHTML.trim();
                if (hexs != false) {
                    if (lbs.string.eqlower(hexs, "hex")) {
                        templateContext = lbs.string.hextoString(templateContext)
                    }
                    if (lbs.string.eqlower(hexs, "base64")) {
                        templateContext = lbs.string.base64decode(templateContext)
                    }
                    if (lbs.string.eqlower(hexs, "hash")) {
                        templateContext = lbs.string.hextoString(templateContext);
                        templateContext = lbs.string.base64decode(templateContext)
                    }
                }
                templateContext = templateContext.replace(/\'/g, "\"").trim();
                let templateCodeArrays = this.depin_check_language(templateContext);
                for (var i = 0; i < js_lable.length; i++) {
                    dms = lbs.add.Dom(document.body, js_lable[i].name);
                    lbs.add.Attr(dms, "src", js_lable[i].src)
                }
                for (var j = 0; j < css_lable.length; j++) {
                    cms = lbs.add.Dom(document.head, css_lable[j].name);
                    lbs.add.Attr(cms, "href", css_lable[j].href);
                    lbs.add.Attr(cms, "rel", "stylesheet");
                    lbs.add.Attr(cms, "type", "text/css")
                }
                for (var k = 0; k < meta_lable.length; k++) {
                    mms = lbs.add.Dom(document.head, "meta");
                    lbs.add.Attr(mms, "name", meta_lable[k].name);
                    lbs.add.Attr(mms, "content", meta_lable[k].content)
                }
                return this.RuncodeTemplate(templateCodeArrays, datas)
            } else {
                var _this = this;
                return this.loader_template(id, function(e) {
                    templateCodeArrays = _this.depin_check_language(e);
                    for (var i = 0; i < js_lable.length; i++) {
                        dms = lbs.add.Dom(document.body, js_lable[i].name);
                        lbs.add.Attr(dms, "src", js_lable[i].src)
                    }
                    for (var j = 0; j < css_lable.length; j++) {
                        cms = lbs.add.Dom(document.head, css_lable[j].name);
                        lbs.add.Attr(cms, "href", css_lable[j].href);
                        lbs.add.Attr(cms, "rel", "stylesheet");
                        lbs.add.Attr(cms, "type", "text/css")
                    }
                    for (var k = 0; k < meta_lable.length; k++) {
                        mms = lbs.add.Dom(document.head, "meta");
                        lbs.add.Attr(mms, "name", meta_lable[k].name);
                        lbs.add.Attr(mms, "content", meta_lable[k].content)
                    }
                    tps(_this.RuncodeTemplate(templateCodeArrays, datas))
                })
            }
            ;
        },
        log:function(options){
			 let script = document.getElementsByTagName("script");
			 let index  = 0;
			 let debug  = false;
			 let param  = arguments;
			 let logo = "https://avatars3.githubusercontent.com/u/16365263?s=400&u=b6b224b7b075b461acc376e9dca3d2fcc460c251&v=4";
			 var show = document.getElementById("show"); 
			 var time = new Date();  // 程序计时的月从0开始取值后+1  
			 var m = time.getMonth() + 1;  
			 var t = time.getFullYear() + "-" + m + "-"   + time.getDate() + " " + time.getHours() + ":"   + time.getMinutes() + ":" + time.getSeconds();  
			 for(var i=0; i<script.length; i++){
				 if(script[i].src.indexOf("lbs.min.js")>0){
					  logo = lbs.get.Attr(script[i],"logo");
					  index = script[i].src.indexOf("debug");
					  if(logo!=null&&options == "logo_consolelog"){
						  let command = [lbs.string.base64decode(lbs.string.hextoString("4A,57,4D,4B,43,51,6B,4A,43,51,6B,4B")), "font-size:23px;background:url('"+logo+"') no-repeat"];
						  let cmd = '59,32,39,75,63,32,39,73,5A,53,35,73,62,32,63,6F,59,32,39,74,62,57,46,75,5A,46,73,77,58,53,78,6A,62,32,31,74,59,57,35,6B,57,7A,46,64,4B,54,73,67,59,32,39,75,63,32,39,73,5A,53,35,73,62,32,63,6F,49,69,56,6A,49,45,78,43,55,79,31,4B,59,58,5A,68,55,32,4E,79,61,58,42,30,49,43,49,73,49,6D,4E,76,62,47,39,79,4F,69,4D,35,4F,54,46,43,4E,54,59,37,49,47,5A,76,62,6E,51,74,63,32,6C,36,5A,54,6F,7A,63,6D,56,74,4F,79,42,6D,62,32,35,30,4C,58,4E,30,65,57,78,6C,4F,6D,6C,30,59,57,78,70,59,7A,73,67,64,47,56,34,64,43,31,7A,61,47,46,6B,62,33,63,36,4E,58,42,34,49,44,4A,77,65,43,41,32,63,48,67,67,49,7A,41,77,4D,44,73,69,4B,54,74,6A,62,32,35,7A,62,32,78,6C,4C,6D,78,76,5A,79,67,69,4A,57,4D,67,62,47,6C,75,61,78,6F,67,61,48,52,30,63,48,4D,36,4C,79,39,6E,61,58,52,6F,64,57,49,75,59,32,39,74,4C,32,78,70,63,32,39,75,5A,32,78,70,62,6A,41,78,4D,6A,6B,76,54,47,4A,7A,53,6E,4D,69,4C,43,4A,6D,62,32,35,30,4C,58,4E,70,65,6D,55,36,4D,58,4A,6C,62,54,73,67,59,32,39,73,62,33,49,36,49,69,74,73,59,6E,4D,75,5A,32,56,30,4C,6D,64,6C,64,46,4A,68,62,6D,52,76,62,55,4E,76,62,47,39,79,4B,43,6B,72,49,6A,73,69,4B,54,74,6A,62,32,35,7A,62,32,78,6C,4C,6D,78,76,5A,79,67,69,4A,57,4D,67,52,45,56,43,56,55,63,67,53,55,35,47,54,79,49,73,49,43,4A,6D,62,32,35,30,4C,58,4E,70,65,6D,55,36,4D,58,4A,6C,62,54,73,67,59,32,39,73,62,33,49,36,49,69,74,73,59,6E,4D,75,5A,32,56,30,4C,6D,64,6C,64,46,4A,68,62,6D,52,76,62,55,4E,76,62,47,39,79,4B,43,6B,72,49,6A,73,67,49,69,6B,37';
						  eval(lbs.string.base64decode(lbs.string.hextoString(cmd)));
				/*		  console.log(command[0],command[1]);
						  console.log("%c LBS-JavaScript ","color:#991B56; font-size:3rem; font-style:italic; text-shadow:5px 2px 6px #000;");
						  console.log("%c 新版请参考： https://github.com/lisonglin0129/LbsJs","font-size:1rem; color:"+lbs.get.getRandomColor()+";");
						  console.log("%c 以下输出为调式信息:", "font-size:1rem; color:"+lbs.get.getRandomColor()+"; ");
					*/  
					 }
					  if(index > 0){
						 debug = script[i].src.substr(index + 6, script[i].src.length);
						 if(debug){
							 if(param.length == 0){
								 console.log("\n");
							 }else{
								for(var i = 0; i<param.length;i++){
									if(param[i] !="logo_consolelog"){
									  console.log("%c ["+t+" DEBUG ]  "+param[i],"font-size:1rem; color:"+lbs.get.getRandomColor()+"; ");
									}
								}
							 }
						 }
					  }
				 }
			 }
        },
        loadJs: function(jsps) {
            script = lbs.add.Dom(document.head, "script");
            script.src = jsps + ".js";
        },
        setCookie: function(name, value) {
            var Days = 30;
            var exp = new Date();
            exp.setTime(exp.getTime() + Days * 24 * 60 * 60 * 1000);
            document.cookie = name + '=' + escape(value) + ';expires=' + exp.toGMTString();
        },
        getCookie: function(name) {
            var arr, reg = new RegExp('(^| )' + name + '=([^;]*)(;|$)');
            if (arr = document.cookie.match(reg)) {
                return unescape(arr[2]);
            } else {
                return null;
            }
        },
        init: function(rq, fun) {
            var path, isDevelopment = false;
            var scripts = document.getElementsByTagName('script');
            var ps = "";
            basedir = "lbs";
            for (var i = 0; i < scripts.length; i++) {
                var scriptSrc = scripts[i].src;
                var match = scriptSrc.indexOf("lbs.min.js");
                if (match === -1) {
                    continue;
                }
                try {
                    path = scriptSrc.substring(0, match);
                    ps = path + basedir + "/";
                    var queryString = scriptSrc.substring(match + 10);
                    var isTrue = queryString && queryString.indexOf('debug') != -1;
                    isDevelopment = isTrue ? true : false;
                } catch (e) {
                    isDevelopment = false;
                }
                break;
            }
            if (typeof (rq) == 'string') {
                lbs.loadJs(ps + rq);
            }
            if (typeof (rq) == 'object') {
                for (var i = 0; i < rq.length; i++) {
                    lbs.loadJs(ps + rq[i]);
                }
            }
            fun();
        },
        display: function(id, template_object, type) {
            typeParam = (type == undefined) || (type == '') ? false : type;
            if (typeParam == "script") {
                var script = document.createElement("script");
                script.innerHTML = template_object.context;
                lbs.get.Id(id).appendChild(script);
                lbs.get.Id(id).innerHTML = "<s:template style='display:none;'>" + lbs.string.toHex(lbs.string.base64encode(template_object.context)) + "</s:template>"
            }else{
                lbs.get.Id(id).innerHTML = template_object.context
            }
            ;
        },

        string: {
            toHex: function(str) {
                var val = "";
                for (var i = 0; i < str.length; i++) {
                    if (val == "") {
                        val = str.charCodeAt(i).toString(16).toUpperCase()
                    } else {
                        var he = str.charCodeAt(i).toString(16).toUpperCase();
                        he.length == 1 ? "0" + he : he;
                        val += "," + he
                    }
                }
                return val
            },
            hextoString: function(str) {
                var val = "";
                var dds = str.trim();
                var arr = dds.split(",");
                for (var i = 0; i < arr.length; i++) {
                    val = val + String.fromCharCode("0x" + arr[i])
                }
                return val.trim()
            },
            toJson: function(str) {
                if (lbs.is.object(str)) {
                    return str;
                }
                return eval('(' + str + ')');
            },
            eqlower: function(str1, str2) {
                if (str1.toLowerCase() == str2.toLowerCase()) {
                    return true
                }
                return false
            },
            utf8to16: function(str) {
                var out, i, len, c;
                var char2, char3;
                out = "";
                len = str.length;
                i = 0;
                while (i < len) {
                    c = str.charCodeAt(i++);
                    switch (c >> 4) {
                    case 0:
                    case 1:
                    case 2:
                    case 3:
                    case 4:
                    case 5:
                    case 6:
                    case 7:
                        {
                            out += str.charAt(i - 1);
                            break
                        }
                    case 12:
                    case 13:
                        {
                            char2 = str.charCodeAt(i++);
                            out += String.fromCharCode(((c & 0x1F) << 6) | (char2 & 0x3F));
                            break
                        }
                    case 14:
                        {
                            char2 = str.charCodeAt(i++);
                            char3 = str.charCodeAt(i++);
                            out += String.fromCharCode(((c & 0x0F) << 12) | ((char2 & 0x3F) << 6) | ((char3 & 0x3F) << 0));
                            break
                        }
                    }
                }
                return out
            },
            base64encode: function(str) {
                var base64EncodeChars = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/";
                var base64DecodeChars = new Array(-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,62,-1,-1,-1,63,52,53,54,55,56,57,58,59,60,61,-1,-1,-1,-1,-1,-1,-1,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,-1,-1,-1,-1,-1,-1,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,-1,-1,-1,-1,-1);
                var out, i, len;
                var c1, c2, c3;
                len = str.length;
                i = 0;
                out = "";
                while (i < len) {
                    c1 = str.charCodeAt(i++) & 0xff;
                    if (i == len) {
                        out += base64EncodeChars.charAt(c1 >> 2);
                        out += base64EncodeChars.charAt((c1 & 0x3) << 4);
                        out += "==";
                        break
                    }
                    c2 = str.charCodeAt(i++);
                    if (i == len) {
                        out += base64EncodeChars.charAt(c1 >> 2);
                        out += base64EncodeChars.charAt(((c1 & 0x3) << 4) | ((c2 & 0xF0) >> 4));
                        out += base64EncodeChars.charAt((c2 & 0xF) << 2);
                        out += "=";
                        break
                    }
                    c3 = str.charCodeAt(i++);
                    out += base64EncodeChars.charAt(c1 >> 2);
                    out += base64EncodeChars.charAt(((c1 & 0x3) << 4) | ((c2 & 0xF0) >> 4));
                    out += base64EncodeChars.charAt(((c2 & 0xF) << 2) | ((c3 & 0xC0) >> 6));
                    out += base64EncodeChars.charAt(c3 & 0x3F)
                }
                return out
            },
            base64decode: function(str, encodding) {
                var encodding = (encodding == undefined) || (encodding == '') ? false : encodding;
                var base64EncodeChars = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/";
                var base64DecodeChars = new Array(-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,62,-1,-1,-1,63,52,53,54,55,56,57,58,59,60,61,-1,-1,-1,-1,-1,-1,-1,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,-1,-1,-1,-1,-1,-1,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,-1,-1,-1,-1,-1);
                var c1, c2, c3, c4;
                var i, len, out;
                len = str.length;
                i = 0;
                out = "";
                while (i < len) {
                    do {
                        c1 = base64DecodeChars[str.charCodeAt(i++) & 0xff]
                    } while (i < len && c1 == -1);if (c1 == -1) {
                        break
                    }
                    do {
                        c2 = base64DecodeChars[str.charCodeAt(i++) & 0xff]
                    } while (i < len && c2 == -1);if (c2 == -1) {
                        break
                    }
                    out += String.fromCharCode((c1 << 2) | ((c2 & 0x30) >> 4));
                    do {
                        c3 = str.charCodeAt(i++) & 0xff;
                        if (c3 == 61) {
                            return out
                        }
                        c3 = base64DecodeChars[c3]
                    } while (i < len && c3 == -1);if (c3 == -1) {
                        break
                    }
                    out += String.fromCharCode(((c2 & 0XF) << 4) | ((c3 & 0x3C) >> 2));
                    do {
                        c4 = str.charCodeAt(i++) & 0xff;
                        if (c4 == 61) {
                            return out
                        }
                        c4 = base64DecodeChars[c4]
                    } while (i < len && c4 == -1);if (c4 == -1) {
                        break
                    }
                    out += String.fromCharCode(((c3 & 0x03) << 6) | c4)
                }
                if (encodding == false) {
                    return out
                }
                return string.utf8to16(out)
            }
        },
        is: {
            set: function(str) {
                return typeof (str) == 'undefined' ? false : str
            },
            html5: function() {
                return (!~0x1111111111111111) ? false : true
            },
            tel: function(tel) {
                var pattern = /^1[34578]\d{9}$/;
                if (pattern.test(tel)) {
                    return tel
                }
                return false
            },
            card: function(sId) {
                var card_area = {
                    11: '北京',
                    12: '天津',
                    13: '河北',
                    14: '山西',
                    21: '辽宁',
                    15: '内蒙古',
                    22: '吉林',
                    31: '上海',
                    32: '江苏',
                    33: '浙江',
                    34: '安徽',
                    23: '黑龙江',
                    35: '福建',
                    36: '江西',
                    37: '山东',
                    41: '河南',
                    42: '湖北',
                    43: '湖南',
                    44: '广东',
                    45: '广西',
                    46: '海南',
                    50: '重庆',
                    51: '四川',
                    52: '贵州',
                    53: '云南',
                    54: '西藏',
                    61: '陕西',
                    62: '甘肃',
                    63: '青海',
                    64: '宁夏',
                    65: '新疆',
                    71: '台湾',
                    81: '香港',
                    82: '澳门',
                    91: '国外'
                };
                var iSum = 0;
                var info = '';
                var card_info = Array(2);
                var error = '';
                sId = sId.replace(/x$/i, 'a');
                if (0 == sId.length) {
                    error = '请填写你的身份证';
                    return false
                }
                if (null == card_area[parseInt(sId.substr(0, 2))]) {
                    error = '非法证件你的地区填写有错误请仔细填写';
                    return false
                }
                sBirthday = sId.substr(6, 4) + '-' + Number(sId.substr(10, 2)) + '-' + Number(sId.substr(12, 2));
                var d = new Date(sBirthday.replace(/-/g, '/'));
                if (sBirthday != (d.getFullYear() + '-' + (d.getMonth() + 1) + '-' + d.getDate())) {
                    error = '非法证件你的生日填写有错误请仔细填写';
                    return false
                }
                for (var i = 17; i >= 0; i--) {
                    iSum += (Math.pow(2, i) % 11) * parseInt(sId.charAt(17 - i), 11)
                }
                if (1 != iSum % 11) {
                    error = '非法证号你确认你是地球人请认真填写哦~~~~';
                    return false
                }
                if (sId.length > 19) {
                    error = '你确认你的身份证是有效证件？';
                    return false
                }
                card_info[0] = card_area[parseInt(sId.substr(0, 2))];
                card_info[1] = sBirthday;
                card_info[2] = sId.substr(16, 1) % 2 ? '男' : '女';
                return card_info
            },
            object: function(type) {
                return 'object' == typeof (type) ? true : false
            },
            string: function(type) {
                return 'string' == typeof (type) ? true : false
            },
            int: function(type) {
                if ('number' == typeof (type)) {
                    if (0 > type.toString().indexOf('.')) {
                        return true
                    }
                }
                return false
            },
            double: function(type) {
                if ('number' == typeof (type)) {
                    if (0 <= type.toString().indexOf('.')) {
                        return true
                    }
                }
                return false
            }
        },
        add: {
            Dom: function(obj, dom) {
                var dom = document.createElement(dom);
                lbs.get.Id(obj).appendChild(dom);
                return dom
            },
            Attr: function(obj, key, value) {
                var styledata = value;
                if (lbs.is.object(value)) {
                    styledata = '';
                    for (json in value) {
                        styledata += json + ':' + value[json] + ';'
                    }
                }
                obj.setAttribute(key, styledata);
                return obj
            }
        },
        getHttpRequest: function() {
            let XMLHttpReq = null;
            try {
                XMLHttpReq = new ActiveXObject('Msxml2.XMLHTTP')
            } catch (E) {
                try {
                    XMLHttpReq = new ActiveXObject('Microsoft.XMLHTTP')
                } catch (E) {
                    XMLHttpReq = new XMLHttpRequest()
                }
            }
            return XMLHttpReq;
        },
        ajaxpost: function(json) {
            header = json.header;
            xmlreq = lbs.getHttpRequest();
            xmlreq.open('post', json.url, true);
            for (headers in header) {
                for (h in header[headers]) {
                    xmlreq.setRequestHeader(h, header[headers][h])
                }
            }
            xmlreq.send(json.data);
            xmlreq.onreadystatechange = function() {
                switch (xmlreq.readyState) {
                case 1:
                    {
                        break
                    }
                case 2:
                    {
                        break
                    }
                case 3:
                    {
                        break
                    }
                case 4:
                    {
                        if (xmlreq.status == 200 || xmlreq.status == 0) {
                            if (json.success_callback != '') {
                                if (lbs.string.eqlower(json.dataType, 'json')) {
                                    json.success_callback(lbs.string.toJson(xmlreq.responseText));
                                } else {
                                    json.success_callback(xmlreq.responseText)
                                }
                            }
                        }
                    }
                }
            }
            ;
        },
        ajax_param: function(json) {
            let data = "";
            if (json.data != undefined) {
                if (lbs.is.object(json.data)) {
                    for (d in json.data) {
                        data = data + d + '=' + json.data[d] + '&'
                    }
                    if (lbs.string.eqlower(json.type, 'get')) {
                        data = '?' + data.substring(0, data.length - 1)
                    }
                } else {
                    if (json.data.length >= 1) {
                        data = json.data.indexOf('?') < 0 ? '?' + json.data : json.data + ''
                    }
                }
            }
            return data;
            ;
        },
        ajaxget: function(json) {
            let getxmlreq = lbs.getHttpRequest();
            getxmlreq.open('get', json.url + json.data, true);
            getxmlreq.send(null);
            getxmlreq.onreadystatechange = function() {
                switch (getxmlreq.readyState) {
                case 1:
                    {
                        break
                    }
                case 2:
                    {
                        break
                    }
                case 3:
                    {
                        break
                    }
                case 4:
                    {
                        if (getxmlreq.status == 200 || getxmlreq.status == 0) {
                            if (json.success_callback != '') {
                                if (lbs.string.eqlower(json.dataType, 'json')) {
                                    json.success_callback(lbs.string.toJson(getxmlreq.responseText))
                                } else {
                                    json.success_callback(getxmlreq.responseText)
                                }
                            }
                        }
                    }
                }
            };
        },
        Server: function(json) {
            var json = lbs.is.object(json) ? json : lbs.string.toJson(json);
            let type = (json.type == undefined) || (json.type == '') ? 'get' : json.type;
            let url = (json.url == undefined) || (json.url == '') ? console.log('请求url不能为空') : json.url;
            let headers = (json.header == undefined) || (json.header == "") ? [{
                'Content-Type': 'application/x-www-form-urlencoded'
            }] : json.header;
            let dataTypes = (json.dataType == undefined) || (json.dataType == '') ? 'json' : json.dataType;
            let success_callbacks = (json.success == undefined) || (json.success == '') ? '' : json.success;
            let datas = lbs.ajax_param(json);
            if (lbs.string.eqlower(type, 'post')) {
                lbs.ajaxpost({
                    url: url,
                    header: headers,
                    data: datas,
                    dataType: dataTypes,
                    success_callback: success_callbacks
                });
            } else {
                lbs.ajaxget({
                    url: url,
                    data: datas,
                    dataType: dataTypes,
                    success_callback: success_callbacks
                });
            }
            ;
        },
        Ajax: {
            Call: function(json) {
                var json = lbs.is.object(json) ? json : lbs.string.toJson(json);
                let type = (json.type == undefined) || (json.type == '') ? 'get' : json.type;
                let url = (json.url == undefined) || (json.url == '') ? console.log('请求url不能为空') : json.url;
                let header = (json.header == undefined) || (json.header == "") ? [{
                    'Content-Type': 'application/x-www-form-urlencoded'
                }] : json.header;
                let success_callback = (json.success == undefined) || (json.success == '') ? '' : json.success;
                let dataType = (json.dataType == undefined) || (json.dataType == '') ? 'json' : json.dataType;
                let jsonp = (json.jsonp == undefined) || (json.jsonp == '') ? false : json.jsonp;
                let data = "";
                if (json.data != undefined) {
                    if (lbs.is.object(json.data)) {
                        for (d in json.data) {
                            data = data + d + '=' + json.data[d] + '&'
                        }
                        if (lbs.string.eqlower(type, 'get')) {
                            data = '?' + data.substring(0, data.length - 1)
                        }
                    } else {
                        if (json.data.length >= 1) {
                            data = json.data.indexOf('?') < 0 ? '?' + json.data : json.data + ''
                        }
                    }
                }
                if (jsonp) {
                    var body = lbs.get.body();
                    var ifram_ids_name = "lin_" + Date.parse(new Date());
                    if (lbs.string.eqlower(type, 'post')) {
                        var ifm = lbs.add.Dom(body, "iframe");
                        lbs.add.Attr(ifm, "id", ifram_ids_name);
                        lbs.add.Attr(ifm, "style", {
                            "display": "none"
                        });
                        var ifmobj = window.frames[ifram_ids_name].contentWindow.document;
                        let forms = "<form id=\"" + ifram_ids_name + "_forms\" action=\"" + url + "\" method=\"" + type + "\"   enctype=\"multipart/form-data\">";
                        if (json.data != undefined) {
                            for (d in json.data) {
                                forms = forms + "\n<input name=\"" + d + "\" value=\"" + json.data[d] + "\"/>"
                            }
                            forms = forms + "\n</form>"
                        }
                        ifmobj.body.innerHTML = forms;
                        window.onload = function() {
                            var script = ifmobj.createElement("script");
                            ifmobj.body.appendChild(script);
                            script.innerHTML = "(function(){document.getElementById(\"" + ifram_ids_name + "_forms\").submit();})();";
                            window.frames[ifram_ids_name].onload = function() {
                                try {
                                    if (this.contentWindow.hasOwnProperty("document")) {
                                        if (lbs.string.eqlower(dataType, 'json')) {
                                            success_callback(lbs.string.toJson(this.contentWindow.document.body.innerHTML))
                                        } else {
                                            success_callback(this.contentWindow.document.body.innerHTML)
                                        }
                                    }
                                } catch (e) {}
                            }
                        }
                    }
                    return
                }
                let XMLHttpReq = null;
                try {
                    XMLHttpReq = new ActiveXObject('Msxml2.XMLHTTP')
                } catch (E) {
                    try {
                        XMLHttpReq = new ActiveXObject('Microsoft.XMLHTTP')
                    } catch (E) {
                        XMLHttpReq = new XMLHttpRequest()
                    }
                }
                if (XMLHttpReq) {
                    if (lbs.string.eqlower(type, 'post')) {
                        XMLHttpReq.open('post', url, true);
                        for (headers in header) {
                            for (h in header[headers]) {
                                XMLHttpReq.setRequestHeader(h, header[headers][h])
                            }
                        }
                        XMLHttpReq.send(data)
                    } else if (lbs.string.eqlower(type, 'get')) {
                        XMLHttpReq.open('get', url + data, true);
                        XMLHttpReq.send(null)
                    }
                }
                XMLHttpReq.onreadystatechange = function() {
                    setTimeout(function() {
                        switch (XMLHttpReq.readyState) {
                        case 1:
                            {
                                break
                            }
                        case 2:
                            {
                                break
                            }
                        case 3:
                            {
                                break
                            }
                        case 4:
                            {
                                if (XMLHttpReq.status == 200 || XMLHttpReq.status == 0) {
                                    if (success_callback != '') {
                                        if (lbs.string.eqlower(dataType, 'json')) {
                                            success_callback(lbs.string.toJson(XMLHttpReq.responseText))
                                        } else {
                                            success_callback(XMLHttpReq.responseText)
                                        }
                                    }
                                }
                            }
                        }
                    }, 100)
                }
            }
        },
        animate: {
            loaderPages: function(id) {
                var mobileHeight = window.innerHeight;
                let html = '<div id="pgs" class="out">';
                html = html + '<div class="fade-in"><div class="container">';
                html = html + '<div class="one common"></div><div class="two common"></div><div class="three common"></div><div class="four common"></div><div class="five common"></div><div class="six common"></div><div class="seven common"></div><div class="eight common"></div></div>';
                html = html + '<div class="bar"><div class="progress"></div></div>';
                html = html + '</div></div>';
                lbs.get.Id(id).innerHTML = html;
                anHeight = lbs.get.Id("pgs").offsetHeight;
                lbs.get.Id("pgs").style.marginTop = mobileHeight / 2 - anHeight + "px"
            }
        },
        get: {
            Id: function(obj, fun) {
                if (undefined == fun) {
                    return lbs.is.object(obj) ? obj : (document.getElementById(obj))
                } else {
                    var cls_lbs_intval_get_id = setInterval(function() {
                        objs = document.getElementById(obj);
                        if (null != objs) {
                            fun(objs);
                            clearInterval(cls_lbs_intval_get_id)
                        }
                    }, 100)
                }
            },
            getColor:function(rgb){ 
        		var regexp = /[0-9]{0,3}/g;  
        		var re = rgb.match(regexp);
        		var hexColor = "#"; var hex = ['0', '1', '2', '3', '4', '5', '6', '7', '8', '9', 'A', 'B', 'C', 'D', 'E', 'F'];  
        		for (var i = 0; i < re.length; i++) {
        			var r = null, c = re[i], l = c; 
        			var hexAr = [];
        			while (c > 16){  
        				r = c % 16;  
        				c = (c / 16) >> 0; 
        				hexAr.push(hex[r]);  
        			}hexAr.push(hex[c]);
        			if(l < 16&&l != ""){        
        				hexAr.push(0)
        			}
        			 hexColor += hexAr.reverse().join(''); 
        		}
        	   return hexColor;  
        	},
        	getRandomColor:function(){
				  let r = Math.ceil(Math.random()*255); 
				  let g = Math.ceil(Math.random()*255); 
				  let b = Math.ceil(Math.random()*255); 
				  var color = lbs.get.getColor(r+","+g+","+b);
				  return color;
        	},
            Attr: function(id, attr_str, fun) {
                if (undefined == fun) {
                    return lbs.get.Id(id).getAttribute(attr_str)
                } else {
                    lbs.get.Id(id, function(callback) {
                        fun(callback.getAttribute(attr_str))
                    })
                }
            },
            body: function() {
                return document.body
            },
            Tag: function(obj, Tagname) {
                return lbs.get.Id(obj).getElementsByTagName(Tagname)
            },
            Name: function(Name) {
                return document.getElementsByName(Name)
            },
            urlencode: function(str) {
                return document.getElementsByName(Name)
            },
            Os: function() {
                var OsObject = "";
                if (navigator.userAgent.indexOf("MSIE") > 0) {
                    return "MSIE"
                }
                if (isFirefox = navigator.userAgent.indexOf("Firefox") > 0) {
                    return "Firefox"
                }
                if (isSafari = navigator.userAgent.indexOf("Safari") > 0) {
                    return "Safari"
                }
                if (isCamino = navigator.userAgent.indexOf("Camino") > 0) {
                    return "Camino"
                }
                if (isMozilla = navigator.userAgent.indexOf("Gecko/") > 0) {
                    return "Gecko"
                }
            },
            Param: function(name) {
                var reg = new RegExp("(^|&)" + name + "=([^&]*)(&|$)","i");
                var r = window.location.search.substr(1).match(reg);
                if (null != r) {
                    return unescape(r[2])
                }
                return null
            },
            Request: function() {
                var url = location.search;
                var theRequest = new Object();
                if (url.indexOf("?") != -1) {
                    var str = url.substr(1);
                    var i = 0;
                    strs = str.split("&");
                    while (i < strs.length) {
                        theRequest[strs[i].split("=")[0]] = unescape(strs[i].split("=")[1]);
                        i = -~1
                    }
                }
                return theRequest
            }
        },
        showPragess: function(json) {
            let s = (json.fun == undefined) || (json.fun == '') ? false : json.fun;
            var pgs = document.querySelectorAll(json.id);
            let pgcur = 0;
            pgs[0].innerHTML = '<div class="lbs-progress"></div> <div class="lbs-progress2"></div> <div class="lbs-progress-content"></div>';
            let p1 = pgs[0].querySelector(".lbs-progress2");
            let p2 = pgs[0].querySelector(".lbs-progress");
            if (json.index < 50) {
                pgcur = (json.index * 3.6);
                p1.style.transform = "rotate(" + pgcur + "deg)";
            } else {
                pgcur = (json.index - 50) * 3.6;
                p1.style.background = "#1E9FFF";
                p1.style.transform = "rotate(0deg)";
                p2.style.transform = "rotate(" + pgcur + "deg)";
            }
            if (typeof (s) == "function") {
                s(pgs[0]);
            } else if (s == true) {
                pgs[0].querySelector(".lbs-progress-content").innerHTML = "<span>" + json.index + "%</span>";
            }
        },
        html5: {
            FullDiv: function(obj) {
                var emds = (obj == undefined) || (obj == '') ? (document.documentElement) : obj;
                var docElm = emds;
                if (docElm.requestFullscreen) {
                    docElm.requestFullscreen()
                } else if (docElm.mozRequestFullScreen) {
                    docElm.mozRequestFullScreen()
                } else if (docElm.webkitRequestFullScreen) {
                    docElm.webkitRequestFullScreen()
                } else if (docElm.msRequestFullscreen) {
                    docElm.msRequestFullscreen()
                }
            }
        }
    }
}
)();
lbs.log("logo_consolelog");
